import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cwt_ecommerce_ui_kit/features/shop/controllers/available_room_controller.dart';
import 'package:cwt_ecommerce_ui_kit/home_menu.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../common/widgets/loaders/loaders.dart';
import '../../../utils/constants/image_strings.dart';
import '../../../utils/helpers/network_manager.dart';
import '../../../utils/popups/full_screen_loader.dart';
import '../models/booking_model.dart';
import '../../personalization/controllers/user_controller.dart'; // Import UserController

class BookRoomController extends GetxController {
  final UserController userController = Get.find<UserController>();
  final AvailableRoomController availableRoomController =
      Get.find<AvailableRoomController>();

  // Properties for booking details
  late DateTime selectedDate;
  late TimeOfDay selectedStartTime;
  late TimeOfDay selectedEndTime;
  late String bookingTitle;
  late String bookingNotes;

  DateTime convertToDateTime(DateTime date, TimeOfDay time) {
    return DateTime(date.year, date.month, date.day, time.hour, time.minute);
  }
  // Constructor with required roomId

  // Method to set booking details
  void setBookingDetails({
    required DateTime selectedDate,
    required TimeOfDay selectedStartTime,
    required TimeOfDay selectedEndTime,
    required String bookingTitle,
    required String bookingNotes,
  }) {
    this.selectedDate = selectedDate;
    this.selectedStartTime =
        selectedStartTime; // Already TimeOfDay, no casting needed
    this.selectedEndTime =
        selectedEndTime; // Already TimeOfDay, no casting needed
    this.bookingTitle = bookingTitle;
    this.bookingNotes = bookingNotes;
  }

  // Method to handle booking logic
  Future<void> bookRoom(String roomId) async {
    // Access selected details from AvailableRoomController
    final DateTime selectedDate = availableRoomController.selectedDate.value;
    final DateTime startTime = availableRoomController.selectedStartTime.value;
    final DateTime endTime = availableRoomController.selectedEndTime.value;
    final String bookingTitle = availableRoomController.bookingTitle.value;
    final String bookingNotes = availableRoomController.bookingNotes.value;
    final bookingTime = DateTime.now();

    // Create a BookingModel instance
    BookingModel newBooking = BookingModel(
      // bookingId: '', // Auto-generated by Firestore
      roomId: roomId,
      bookingTime: bookingTime,
      date: selectedDate,
      startTime: startTime, // Use converted DateTime
      endTime: endTime, // Use converted DateTime
      repeat: 'No',
      userId: userController.user.value.id,
      status: 'Booked',
      title: bookingTitle,
      notes: bookingNotes,
    );

    try {
      TFullScreenLoader.openLoadingDialog(
          'We are updating your information', TImages.docerAnimation);

      final isConnected = await NetworkManager.instance.isConnected();
      if (!isConnected) {
        TFullScreenLoader.stopLoading();
        return;
      }

      // Save the booking to Firestore
      await FirebaseFirestore.instance
          .collection('Bookings')
          .add(newBooking.toJson());

      TFullScreenLoader.stopLoading();

      await AwesomeNotifications().createNotification(
          content: NotificationContent(
              id: 1,
              channelKey: "reminder_channel",
              title: "Your booked room is available right now!",
              body:
                  "Use this room right now, please request the key at the person-in-charge of the room",
              category: NotificationCategory.Reminder),
          schedule: NotificationCalendar.fromDate(date: startTime));

      Future.delayed(Duration.zero, () {
        TLoaders.successSnackBar(
            title: 'Contratulations', message: 'Your room has been booked.');
      });

      Get.off(() => const HomeMenu());
    } catch (e) {
      TFullScreenLoader.stopLoading();
      TLoaders.errorSnackBar(title: 'Oh Snap!', message: e.toString());
      if (kDebugMode) {
        print('Error booking room: $e');
      }
    }
  }
}
